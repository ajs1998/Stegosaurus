For a software project, I would like to create a steganography engine in C++ 
that can hide information in image files. The engine will consist of an encoder 
that combines an image and a payload together and a decoder that can find the 
payload from an image. I will be using Visual Studio 19 and C++17, along with 
libraries to help read and write various image formats. My goal is to make this 
project a static library but I also want to create an application around it to 
make it easier to use and understand.

One widely used steganographic technique is to hide information in the two 
least significant bits of each byte. This allows for 25% of the original image 
to be overwritten with a payload with a negligible drop in image quality. One 
way to do this is sequentially through the file, but I would like to implement 
a way to modify bytes in a random order in which the decoder would be able to 
also recognize. Distributing the payload across an image in a uniformly random 
way might make anomalies harder to detect than hiding information in the first 
30% of the file and leaving the last 70% alone. I will also explore the idea of 
encrypting payloads before hiding them in image files for an extra layer of 
security. The encoder will be able to use different methods of encryption and 
the decoder will be able to detect which method was used.

To implement these features, I would need to prepend a header of some sort to 
the payload that contains information about how the payload was encoded and 
encrypted. To avoid using too much data for this header, I will have to encode 
a very small amount of information into individual bits. Most programming 
languages use booleans that take up an entire byte in memory even though only 1 
bit is needed. I would compress any boolean flags I use down to 1 bit each to 
save space in the image for the actual payload.